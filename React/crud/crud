//https://medium.com/@kaklotarrahul79/how-to-do-crud-operations-in-reactjs-52a9347954f3
How to do crud operations in ReactJS ?
Here’s an example of how you can implement a basic CRUD (Create, Read, Update, Delete) application in React using the Fetch API. I’ll break down the code into different components and pages for better organization.

Step:1 Setting Up the Project:
You’ll need to create a new React application using a tool like create-react-app. Run the following commands in your terminal:

npx create-react-app crud-app
cd crud-app
npm start
Step:2 Create Components:
Inside the src directory of your project, create the following components:

components/InputForm.js
components/UserList.js
components/UserDetail.js
components/UserEdit.js
InputForm.js:
This component will be used for both creating and updating users.

import React, { useState } from 'react';

const InputForm = ({ addUser, updateUser, initialData }) => {
  const [formData, setFormData] = useState(initialData);

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (formData.id) {
      updateUser(formData);
    } else {
      addUser(formData);
    }
    setFormData({ id: '', name: '', dob: '', address: '' });
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" name="name" value={formData.name} onChange={handleInputChange} />
      </label>
      <label>
        Date of Birth:
        <input type="text" name="dob" value={formData.dob} onChange={handleInputChange} />
      </label>
      <label>
        Address:
        <input type="text" name="address" value={formData.address} onChange={handleInputChange} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
};

export default InputForm;
UserList.js:
This component will display the list of users and provide options to view, edit, and delete.

import React from 'react';

const UserList = ({ users, viewUser, editUser, deleteUser }) => {
  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map((user) => (
          <li key={user.id}>
            {user.name}
            <button onClick={() => viewUser(user)}>View</button>
            <button onClick={() => editUser(user)}>Edit</button>
            <button onClick={() => deleteUser(user.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
UserDetail.js:
This component will show the details of a single user.

import React from 'react';

const UserDetail = ({ user }) => {
  return (
    <div>
      <h2>User Detail</h2>
      <p>Name: {user.name}</p>
      <p>Date of Birth: {user.dob}</p>
      <p>Address: {user.address}</p>
    </div>
  );
};

export default UserDetail;
UserEdit.js:
This component will provide an interface to edit user information.

import React from 'react';
import InputForm from './InputForm';

const UserEdit = ({ user, updateUser }) => {
  return (
    <div>
      <h2>Edit User</h2>
      <InputForm initialData={user} updateUser={updateUser} />
    </div>
  );
};

export default UserEdit;
Step:3 App.js:
Finally, integrate these components into the main App.js.

import React, { useState, useEffect } from 'react';
import InputForm from './components/InputForm';
import UserList from './components/UserList';
import UserDetail from './components/UserDetail';
import UserEdit from './components/UserEdit';

function App() {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);

  // Fetch users on component mount
  useEffect(() => {
    fetchUsers();
  }, []);

  // Fetch users from API
  const fetchUsers = async () => {
    try {
      const response = await fetch('https://api.example.com/users');
      const data = await response.json();
      setUsers(data);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  // Create a new user
  const addUser = async (userData) => {
    try {
      const response = await fetch('https://api.example.com/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });
      const data = await response.json();
      setUsers([...users, data]);
    } catch (error) {
      console.error('Error adding user:', error);
    }
  };

  // Update an existing user
  const updateUser = async (userData) => {
    try {
      const response = await fetch(`https://api.example.com/users/${userData.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });
      const updatedUser = await response.json();
      const updatedUsers = users.map((user) =>
        user.id === updatedUser.id ? updatedUser : user
      );
      setUsers(updatedUsers);
      setSelectedUser(null);
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };

  // Delete a user
  const deleteUser = async (userId) => {
    try {
      await fetch(`https://api.example.com/users/${userId}`, {
        method: 'DELETE',
      });
      const updatedUsers = users.filter((user) => user.id !== userId);
      setUsers(updatedUsers);
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  return (
    <div>
      <h1>CRUD Application</h1>
      <InputForm addUser={addUser} updateUser={updateUser} initialData={{ id: '', name: '', dob: '', address: '' }} />
      <UserList users={users} viewUser={setSelectedUser} editUser={setSelectedUser} deleteUser={deleteUser} />
      {selectedUser ? (
        <div>
          <UserDetail user={selectedUser} />
          <UserEdit user={selectedUser} updateUser={updateUser} />
        </div>
      ) : null}
    </div>
  );
}

export default App;
Please note that this is a simplified example. In a real-world application, you would likely need to handle errors, add more validation, and consider using proper state management libraries like Redux. Also, replace 'https://api.example.com' with the actual API endpoints you are using.

Remember to customize the styles, error handling, and validation according to your project’s requirements.

Thank You for Reading.

JavaScript
Python
Progr
